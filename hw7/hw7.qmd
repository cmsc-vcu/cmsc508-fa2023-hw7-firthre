---
title: Homework 7 - Creating a resume database
author: Ryan Firth
date: 11/12/23
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document contains python code for viewing sections of the hw7 sql database, as well as written information on said databse.

GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-firthre

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This databse contains data on emplyoees at a company, including names, photos, contact info, along with the skills that they have, information about the skills, and their roles at the company.

## Crows-foot diagram

Here is a diagram showing the relationship between entites
```{mermaid}
%%| echo: false
erDiagram
    peopleroles }|..|| people :has
    peopleroles }|--|| skills :has
    peopleskills }|--|| people :has
    peopleskills }|--|| skills :has

peopleroles  
{
    primary_key peopleroles_id
    date peopleskills_date_aquired
    foreign_key int skills_id
    foreign_key int people_id
}  

roles 
{
    primary_key role_id
    varchar role_name
    int role_sort_priority
}

peopleskills 
{
    primary_key peopleskills_id
    date peopleskills_date_aquired
    foreign_key int skills_id
    foreign_key int people_id
}

people 
{
  primary_key people_id
  varchar people_first_name
  varchar people_last_name
  varchar people_email
  varchar people_linkedin_url
  varchar people_headshot_url
  varchar people_discord_handle
  varchar people_brief_bio
  varchar people_date_joined
}

skills 
{
    primary_key skills_id
    varchar skills_name
    varchar skills_description
    varchar skills_tag
    varchar skills_url
    varchar skills_time_commitment
}
```

### People table

The *people* table contains elements that describe all of the people who work at the company

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe all of the skills currently listed that may be applied to those in the company

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the various roles it is possible to have at the company

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

### List skill names, tags, and descriptions ordered by name

```{python}
sql = """
SELECT skills_name, skills_tag, skills_description
FROM skills
ORDER BY skills_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and email addresses ordered by last_name

```{python}
sql = """
SELECT people_first_name, people_last_name, people_email
FROM people
ORDER BY people_last_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1

```{python}
sql = """
SELECT s.skills_name 
FROM skills s
JOIN peopleskills ps ON s.skills_id = ps.skills_id
JOIN people p ON ps.people_id = p.people_id
WHERE p.people_last_name = 'Person 1'
"""

```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
sql = """
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
WHERE s.skills_name = 'Juggling'
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
sql = """
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.role_id
WHERE r.role_name = 'Developer'
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
sql = """
SELECT p.people_first_name, p.people_last_name, p.people_email
FROM people p
LEFT JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id IS NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
sql = """
SELECT s.skills_name, s.skills_tag
FROM skills s
LEFT JOIN peopleskills ps ON s.skills_id = ps.skills_id
WHERE ps.people_id IS NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
sql = """
SELECT p.people_first_name, p.people_last_name, s.skills_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.role_id
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
WHERE r.role_name = 'Boss'
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python}
sql = """
SELECT r.role_id, r.role_name
FROM roles r
LEFT JOIN peopleroles pr ON r.role_id = pr.role_id
WHERE pr.people_id IS NULL
GROUP BY r.role_id
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection
I really enjoyed this assignment. I am starting to like databases more and more as we get deeper into the semester, as at the beginning I wasn't very excited for this class. It feels kinda like a big puzzle, and it's satisfying to get everything working correctly, the only downside is that I wish sql errors were a bit more verbose, like regular programing language error outputs. It's not a big issue once you know what you are doing, but at the learning stage I am at, it is hard to keep all of the proper syntax in place and easily see where I made mistakes, so a lot of time was spent debugging the sql.

Another issue I ran into during this assignment was with poetry not connecting to the most recent version of python I had installed, and complaining that it was on 3.10.12 when I also had 3.11.3 installed. In an attempt to fix this I accidently uninstalled my entire desktop environment on Ubuntu, but it was a realtively easy fix and I found it more ammsuing that frustrating.